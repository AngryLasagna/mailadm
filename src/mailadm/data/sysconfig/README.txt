mailadm system integration files
================================

This README was generated by `mailadm {args}` and contains a complete
description of how you can get mailadm integrated with postfix,
dovecot, nginx and systemd. The instructions here have been developed
under an Ubuntu 16.04 and Debian 9 system. Other versions or distributions
may need adaptation.  Development of `mailadm` takes
place on https://github.com/deltachat/mailadm .

Both mailadm web, prune and command line tools execute as the user
`mailadm` and do never require root privileges.

`mailadm prune` purges user data and thus needs write-permission
to `vmail` ownhed directories. You thus need to add the
`vmail` group for the `mailadm` user.


mailadm configuration file
--------------------------

Default location: `{mailadm_home}/mailadm.cfg`

The mailadm configuration specifies where system file
locations and the mailadm database are to be found.


Integration with dovecot
------------------------------

Default location: `{dovecot_conf_d}/10-auth.conf`

To enable mailadm-controlled authentication and mail delivery services,
add the following line to the `{dovecot_conf_d}/10-auth.conf` file:

    !include auth-mailadm.conf.ext


auth-mailadm.conf.ext
+++++++++++++++++++++

Default location: `{dovecot_conf_d}/auth-mailadm.conf.ext`

Configures passdb/userdb settings for dovecot integration.
This authentication configuration file is typically
included from `{dovecot_conf_d}/10-auth.conf`.


dovecot-sql.conf.ext
++++++++++++++++++++

Default location: `{mailadm_home}/dovecot-sql.conf.ext`

Dovecot uses the queries and Sqlite path inside this config file
to perform password authentication and userdb queries
for delivering mail to a subdirectory of the `vmail` user.

restarting dovecot
+++++++++++++++++++++++++++++++

With all dovecot related integration files in place
you can test the mailadm integration (as root)::

    # systemctl reload dovecot
    # systemctl status dovecot


Integration with postfix
------------------------

Perequisite: You need to already have configured a working "virtual mailbox" setup with postfix.

To let postfix know about mailadm-managed virtual users, add the
mailadm-generated `postfix-users` file to postfix configuration::

    # add these lines into your existing `{postfix_maincf}`
    virtual_mailbox_maps =
        hash:{path_virtual_mailboxes}

Note that mailadm will regenerate `{path_virtual_mailboxes}` when
users are added or deleted through the command line or web API.


Integration with nginx
----------------------

You need to add the following directies to an enabled domain,
for example `{nginx_sites_enabled}/default`::

    # add these lines to domain file in `{nginx_sites_enabled}`
    location /{web_path} {{
        proxy_pass http://localhost:{localhost_mailadm_port}/
    }}

This makes nginx proxy external web requests to our `mailadm-web` service.


file: mailadm-web.service
-------------------------

Default location: `{systemd}/mailadm-web.service`

After copying the unit file to the target location you can enable
and start the service::

    # systemctl enable mailadm-web
    # systemctl start mailadm-web
    # systemctl status mailadm-web

Note that the mailadm web service runs as user "mailadm"
as the mailadm database and the postfix virtual map files
are managed in the `~mailadm` directory.

file: mailadm-prune.service
----------------------------

Default location: `{systemd}/mailadm-prune.service`

With this systemd-unit file in place you can run the
pruning-service every hour::

    # systemctl enable mailadm-prune
    # systemctl start mailadm-prune
    # systemctl status mailadm-prune

Note that the mailadm web service runs as user `mailadm`
as the mailadm database and the postfix virtual map files
are managed in the `~mailadm` directory.
